---
export interface Props {
  name: string;
  defaultTab?: string;
}

const { name, defaultTab = 'expression' } = Astro.props;
---

<div class="bg-white rounded-lg shadow-sm">
  <div class="px-6 py-4 bg-gray-50 border-t border-gray-200">
    <!-- Tab Navigation -->
    <div class="mb-6">
      <nav class="flex justify-center space-x-8" aria-label="Tabs">
        <button 
          id={`tab-expression-${name}`} 
          class={`tab-button whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm transition-colors duration-200 ${
            defaultTab === 'expression'
              ? 'border-blue-500 text-blue-600' 
              : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
          }`}
          data-tab="expression"
        >
          Expression Analysis
        </button>
        <button 
          id={`tab-rankings-${name}`} 
          class={`tab-button whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm transition-colors duration-200 ${
            defaultTab === 'rankings'
              ? 'border-blue-500 text-blue-600' 
              : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
          }`}
          data-tab="rankings"
        >
          Transcription Factor Rankings
        </button>
      </nav>
    </div>

    <!-- Tab Content -->
    <div id={`content-expression-${name}`} class={`tab-content ${defaultTab === 'expression' ? 'active' : 'hidden'}`}>
      <slot name="expression" />
    </div>
    <div id={`content-rankings-${name}`} class={`tab-content ${defaultTab === 'rankings' ? 'active' : 'hidden'}`}>
      <slot name="rankings" />
    </div>
  </div>
</div>

<script define:vars={{ name, defaultTab }}>
  document.addEventListener('DOMContentLoaded', () => {
    const tabButtons = document.querySelectorAll(`[data-tab]`);
    const tabContents = document.querySelectorAll(`.tab-content`);

    function switchTab(activeTabId) {
      // Reset all tabs to inactive state
      tabButtons.forEach(button => {
        button.classList.remove('border-blue-500', 'text-blue-600');
        button.classList.add('border-transparent', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300');
      });

      // Reset all content to hidden
      tabContents.forEach(content => {
        content.classList.add('hidden');
        content.classList.remove('active');
      });

      // Activate selected tab
      const activeButton = document.querySelector(`[data-tab="${activeTabId}"]`);
      const activeContent = document.getElementById(`content-${activeTabId}-${name}`);

      if (activeButton) {
        activeButton.classList.add('border-blue-500', 'text-blue-600');
        activeButton.classList.remove('border-transparent', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300');
      }

      if (activeContent) {
        activeContent.classList.remove('hidden');
        activeContent.classList.add('active');
      }
    }

    // Add click handlers to all tab buttons
    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const tabId = button.getAttribute('data-tab');
        switchTab(tabId);
      });
    });
  });
</script>

<style>
  .tab-button {
    transition: all 0.2s ease-in-out;
  }

  .tab-content {
    transition: opacity 0.3s ease-in-out;
  }

  .tab-content.hidden {
    display: none;
  }

  .tab-content:not(.hidden) {
    display: block;
  }
</style>
