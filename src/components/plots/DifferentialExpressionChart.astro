---
export interface Props {
  name: string;
  differentialExpressionData?: any;
}

const { name, differentialExpressionData } = Astro.props;
const chartId = `de-chart-${name.toLowerCase().replace(/[^a-z0-9]/g, '-')}`;
---

<div>
  <h4 class="font-semibold text-gray-800 mb-2">Differential Expression</h4>
  <div id={chartId} style="height: 300px;"></div>
</div>

<script src="https://cdn.plot.ly/plotly-3.0.1.min.js" charset="utf-8"></script>

<script define:vars={{ chartId, name, differentialExpressionData }}>
  // Function to create differential expression chart
  async function createDifferentialExpressionChart() {
    try {

      
      // Use the differential expression data passed as prop
      const differentialExpressionToUse = differentialExpressionData || {};
      
      const comparisons = Object.keys(differentialExpressionToUse);
      if (comparisons.length === 0) {
        console.warn(`No differential expression data found for ${name}`);
        const container = document.getElementById(chartId);
        if (container) {
          container.innerHTML = `<div style="padding: 20px; text-align: center; color: #6b7280;">No differential expression data available for ${name}</div>`;
        }
        return;
      }
      
      const log2FoldChanges = comparisons.map(comp => differentialExpressionToUse[comp]?.log2FoldChange || 0);
      const pValues = comparisons.map(comp => differentialExpressionToUse[comp]?.pvalue || 1);
      
      // Color bars based on significance (p < 0.05)
      const barColors = pValues.map(p => p < 0.05 ? '#dc2626' : '#6b7280'); // Red for significant, gray for non-significant
      const significanceText = pValues.map((p, i) => 
        p < 0.05 ? `Significant, p-value=${p.toExponential(2)}` : `Not significant, p-value=${p.toExponential(2)}`
      );
      
      const deData = [{
        x: log2FoldChanges,
        y: comparisons,
        type: 'bar',
        orientation: 'h',
        marker: {
          color: barColors,
          opacity: 0.8
        },
        text: significanceText,
        textposition: 'auto',
        hovertemplate: '<b>%{y}</b><br>Log2 Fold Change: %{x:.3f}<br>P-value: %{customdata:.2e}<br>%{text}<extra></extra>',
        customdata: pValues
      }];
      
      const deLayout = {
        title: {
          text: `${name} Log2 Fold Change by Comparison`,
          font: { size: 14, color: '#374151' }
        },
        xaxis: {
          title: 'Log2 Fold Change',
          font: { size: 12 },
          zeroline: true,
          zerolinecolor: '#374151',
          zerolinewidth: 2
        },
        yaxis: {
          title: 'Condition Comparison',
          font: { size: 12 },
          automargin: true
        },
        margin: {
          l: 150,
          r: 30,
          t: 50,
          b: 60
        },
        plot_bgcolor: 'rgba(0,0,0,0)',
        paper_bgcolor: 'rgba(0,0,0,0)',
        showlegend: false
      };

      const config = {
        responsive: true,
        displayModeBar: false
      };

      const deChartElement = document.getElementById(chartId);
      if (deChartElement) {
        Plotly.newPlot(chartId, deData, deLayout, config);
      } else {
        console.error(`DE chart element not found: ${chartId}`);
        const container = document.getElementById(chartId);
        if (container) {
          container.innerHTML = `<div style="padding: 20px; text-align: center; color: orange;">DE chart element not found: ${chartId}</div>`;
        }
      }
      
    } catch (error) {
      console.error(`Error loading differential expression data for ${name}:`, error);
      const container = document.getElementById(chartId);
      if (container) {
        container.innerHTML = `<div style="padding: 20px; text-align: center; color: red;">Error creating DE chart: ${error.message}</div>`;
      }
    }
  }

  // Create plot when the DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    createDifferentialExpressionChart();
  });
</script> 