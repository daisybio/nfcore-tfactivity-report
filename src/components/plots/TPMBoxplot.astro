---
export interface Props {
  name: string;
}

const { name } = Astro.props;
const chartId = `tpm-chart-${name.toLowerCase().replace(/[^a-z0-9]/g, '-')}`;
---

<div>
  <h4 class="font-semibold text-gray-800 mb-2">TPM Expression Levels by Condition</h4>
  <div id={chartId} style="height: 300px;"></div>
</div>

<script src="https://cdn.plot.ly/plotly-3.0.1.min.js" charset="utf-8"></script>

<script define:vars={{ chartId, name }}>
  // Function to create TPM boxplot
  async function createTPMBoxplot() {
    try {
      // Check if data is available in the global cache first
      let tfData = null;
      if (window.tfDataCache && window.tfDataCache[name]) {
        tfData = window.tfDataCache[name];
      } else {
        // Fallback to fetch if cache is not available
        const response = await fetch(`/transcription_factors/${name}.json`);
        if (!response.ok) {
          console.warn(`Could not load data for ${name}: ${response.status}`);
          return;
        }
        tfData = await response.json();
      }
      
      const tpmData = tfData.tpm || {};
      
      const conditions = Object.keys(tpmData);
      if (conditions.length === 0) {
        console.warn(`No TPM data found for ${name}`);
        return;
      }
      
      // Prepare data for boxplot - collect all samples across conditions
      let allTPMValues = [];
      let allConditions = [];
      let sampleNames = [];
      
      conditions.forEach(condition => {
        const samples = tpmData[condition];
        Object.entries(samples).forEach(([sampleName, tpmValue]) => {
          allTPMValues.push(tpmValue);
          allConditions.push(condition);
          sampleNames.push(sampleName);
        });
      });
      
      const boxplotData = [{
        x: allTPMValues,
        y: allConditions,
        type: 'box',
        orientation: 'h',
        boxpoints: 'all', // Show all sample points
        jitter: 0.3,
        pointpos: -1.8,
        marker: {
          color: '#2563eb',
          opacity: 0.6
        },
        line: {
          color: '#1d4ed8'
        },
        text: sampleNames,
        hovertemplate: '<b>%{y}</b><br>Sample: %{text}<br>TPM: %{x:.2f}<extra></extra>'
      }];
      
      const tpmLayout = {
        title: {
          text: `${name} TPM Expression Distribution`,
          font: { size: 14, color: '#374151' }
        },
        xaxis: {
          title: 'TPM (Transcripts Per Million)',
          font: { size: 12 },
          zeroline: false
        },
        yaxis: {
          title: 'Condition',
          font: { size: 12 },
          automargin: true
        },
        margin: {
          l: 120,
          r: 30,
          t: 50,
          b: 60
        },
        plot_bgcolor: 'rgba(0,0,0,0)',
        paper_bgcolor: 'rgba(0,0,0,0)',
        showlegend: false
      };

      const config = {
        responsive: true,
        displayModeBar: false
      };

      const tpmChartElement = document.getElementById(chartId);
      if (tpmChartElement) {
        Plotly.newPlot(chartId, boxplotData, tpmLayout, config);
      }
      
    } catch (error) {
      console.error(`Error loading TPM data for ${name}:`, error);
    }
  }

  // Create plot when the DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    createTPMBoxplot();
  });
</script> 