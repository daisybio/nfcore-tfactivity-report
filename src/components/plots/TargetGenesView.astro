---
export interface Props {
  name: string;
}

const { name } = Astro.props;
---

<div class="space-y-6">
  <!-- Top Target Genes -->
  <div>
    <!-- Header with g:Profiler Button -->
    <div class="mb-4 flex items-center justify-between">
      <h4 class="font-semibold text-gray-800">Top Target Genes (Averaged Across Active Assays)</h4>
      <button 
        id={`gprofiler-btn-${name}`}
        class="px-3 py-1.5 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors duration-200 font-medium text-sm disabled:opacity-50 disabled:cursor-not-allowed"
        disabled
      >
        Analyze in g:Profiler
      </button>
    </div>

    <!-- Info Note -->
    <div class="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
      <p class="text-sm text-blue-800">
        <span class="font-medium">Note:</span> Gene rankings are calculated by averaging scores across currently active assays. 
        Toggle assays above to see how rankings change. Click on any gene to see detailed interaction information.
      </p>
    </div>
    
    <!-- Gene Count Slider -->
    <div class="mb-4 flex items-center space-x-4">
      <label for={`gene-count-${name}`} class="text-sm font-medium text-gray-700 whitespace-nowrap">
        Show top:
      </label>
      <input 
        type="range" 
        id={`gene-count-${name}`}
        min="5" 
        max="20" 
        value="10" 
        class="flex-1 h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
      />
      <span id={`gene-count-display-${name}`} class="text-sm font-medium text-blue-600 w-8">10</span>
      <span class="text-sm text-gray-500">genes</span>
    </div>
    
    <div id={`target-genes-${name}`} class="bg-white rounded-lg p-4 border border-gray-200">
      <div class="text-center text-gray-500 py-4">
        Loading target genes...
      </div>
    </div>
    

  </div>
</div>

<style>
  .slider::-webkit-slider-thumb {
    appearance: none;
    height: 16px;
    width: 16px;
    border-radius: 50%;
    background: #2563eb;
    cursor: pointer;
    border: 2px solid #ffffff;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .slider::-moz-range-thumb {
    height: 16px;
    width: 16px;
    border-radius: 50%;
    background: #2563eb;
    cursor: pointer;
    border: 2px solid #ffffff;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .slider::-webkit-slider-track {
    height: 8px;
    background: #e5e7eb;
    border-radius: 4px;
  }

  .slider::-moz-range-track {
    height: 8px;
    background: #e5e7eb;
    border-radius: 4px;
    border: none;
  }

  .slider:focus {
    outline: none;
  }

  .slider:focus::-webkit-slider-thumb {
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.2);
  }

  /* Gene details panel styling */
  .gene-details-panel {
    overflow: hidden;
    transition: all 0.3s ease-in-out;
  }
  
  .gene-details-panel.hidden {
    max-height: 0;
    opacity: 0;
  }
  
  .gene-details-panel:not(.hidden) {
    max-height: 1000px;
    opacity: 1;
  }

  .gene-row {
    transition: all 0.2s ease-in-out;
    border: 1px solid transparent;
  }

  .gene-row:hover .font-semibold {
    color: #2563eb !important;
  }

  .target-gene-item {
    border-radius: 0.5rem;
  }
</style>

<script define:vars={{ name }}>
  document.addEventListener('DOMContentLoaded', () => {
    // Setup slider functionality
    const geneCountSlider = document.getElementById(`gene-count-${name}`);
    const geneCountDisplay = document.getElementById(`gene-count-display-${name}`);
    
    if (geneCountSlider && geneCountDisplay) {
      geneCountSlider.addEventListener('input', (e) => {
        const value = e.target.value;
        geneCountDisplay.textContent = value;
        loadTargetGenes();
      });
    }

    // Function to get currently active assays
    function getActiveAssays() {
      const activeButtons = document.querySelectorAll('.assay-toggle[data-active="true"]');
      const activeAssays = Array.from(activeButtons).map(button => button.getAttribute('data-assay'));
      
      // If no assay toggles are found (e.g., on individual TF pages), use all available assays
      if (activeAssays.length === 0) {
        // Return all known assays as fallback
        return ['chromHMM_enhancers', 'H3K27ac', 'H3K4me3', 'chromHMM_promoters'];
      }
      
      return activeAssays;
    }

    // Function to load and display target genes
    async function loadTargetGenes() {
      try {
        const response = await fetch(`/transcription_factors/${name}.json`);
        if (!response.ok) {
          console.warn(`Could not load data for ${name}: ${response.status}`);
          return;
        }
        
        const tfData = await response.json();
        const targetGenesData = tfData.target_genes || {};
        
        const activeAssays = getActiveAssays();
        if (activeAssays.length === 0) {
          console.warn('No active assays found');
          return;
        }

        // Calculate average scores for each target gene across active assays
        const geneScores = {};
        const geneAssayCounts = {};

        // Collect scores from all active assays
        activeAssays.forEach(assay => {
          const assayData = targetGenesData[assay] || {};
          Object.entries(assayData).forEach(([gene, score]) => {
            if (!geneScores[gene]) {
              geneScores[gene] = 0;
              geneAssayCounts[gene] = 0;
            }
            geneScores[gene] += score;
            geneAssayCounts[gene]++;
          });
        });

        // Get current slider value
        const geneCountSlider = document.getElementById(`gene-count-${name}`);
        const topCount = geneCountSlider ? parseInt(geneCountSlider.value) : 10;

        // Calculate averages and create sorted list
        const averagedGenes = Object.entries(geneScores)
          .map(([gene, totalScore]) => ({
            gene,
            avgScore: totalScore / geneAssayCounts[gene]
          }))
          .sort((a, b) => b.avgScore - a.avgScore)
          .slice(0, topCount);

        // Display target genes
        const targetGenesContainer = document.getElementById(`target-genes-${name}`);
        if (targetGenesContainer && averagedGenes.length > 0) {
          targetGenesContainer.innerHTML = `
            <div class="space-y-1">
              ${averagedGenes.map((item, index) => `
                <div class="target-gene-item">
                  <div class="flex items-center justify-between py-2 px-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors duration-150 gene-row cursor-pointer" data-gene="${item.gene}" onclick="showTargetGeneDetails('${item.gene}', ${index + 1})">
                    <div class="flex items-center space-x-3">
                      <span class="font-medium text-gray-700 text-sm w-6">#${index + 1}</span>
                      <span class="font-semibold text-gray-900">${item.gene}</span>
                    </div>
                    <div class="flex items-center space-x-2">
                      <div class="text-sm font-medium text-blue-600">${item.avgScore.toFixed(3)}</div>
                      <svg class="gene-chevron w-4 h-4 text-gray-400 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                      </svg>
                    </div>
                  </div>
                  <!-- Expansion panel placeholder for this gene -->
                  <div id="gene-details-${item.gene}-${name}" class="gene-details-panel hidden">
                    <!-- Content will be populated by JavaScript -->
                  </div>
                </div>
              `).join('')}
            </div>
          `;

          // Enable g:Profiler button and set up click handler
          const gProfilerBtn = document.getElementById(`gprofiler-btn-${name}`);
          if (gProfilerBtn) {
            gProfilerBtn.disabled = false;
            
            // Remove existing event listeners to avoid duplicates
            gProfilerBtn.replaceWith(gProfilerBtn.cloneNode(true));
            const newGProfilerBtn = document.getElementById(`gprofiler-btn-${name}`);
            
            newGProfilerBtn.addEventListener('click', () => {
              const geneList = averagedGenes.map(item => item.gene).join('\n');
              const gProfilerUrl = `https://biit.cs.ut.ee/gprofiler/gost?organism=hsapiens&query=${encodeURIComponent(geneList)}&ordered=true`;
              window.open(gProfilerUrl, '_blank');
            });
          }
        } else if (targetGenesContainer) {
          targetGenesContainer.innerHTML = `
            <div class="text-center text-gray-500 py-4">
              No target genes found for active assays
            </div>
          `;

          // Disable g:Profiler button when no genes are available
          const gProfilerBtn = document.getElementById(`gprofiler-btn-${name}`);
          if (gProfilerBtn) {
            gProfilerBtn.disabled = true;
          }
        }
        
      } catch (error) {
        console.error(`Error loading target genes for ${name}:`, error);
        const targetGenesContainer = document.getElementById(`target-genes-${name}`);
        if (targetGenesContainer) {
          targetGenesContainer.innerHTML = `
            <div class="text-center text-red-500 py-4">
              Error loading target genes data
            </div>
          `;
        }

        // Disable g:Profiler button on error
        const gProfilerBtn = document.getElementById(`gprofiler-btn-${name}`);
        if (gProfilerBtn) {
          gProfilerBtn.disabled = true;
        }
      }
    }

    // Expose loadTargetGenes globally for the parent component
    window[`loadTargetGenes_${name}`] = loadTargetGenes;

    // Utility function to render heatmaps
    function renderHeatmap(containerId, title, data, columns, colorScheme) {
      const container = document.getElementById(containerId);
      if (!container || !data || data.length === 0 || !columns || columns.length === 0) {
        if (container) {
          container.innerHTML = `
            <div>
              <h6 class="font-medium text-gray-800 mb-2 text-sm">${title}</h6>
              <div class="text-center text-gray-500 py-3 text-sm">No data available for this target gene</div>
            </div>
          `;
        }
        return;
      }

      // Find min and max values for color scaling
      let minValue = Infinity;
      let maxValue = -Infinity;
      
      data.forEach(row => {
        columns.forEach(column => {
          const value = row[column];
          if (value !== null && value !== undefined && !isNaN(value)) {
            minValue = Math.min(minValue, value);
            maxValue = Math.max(maxValue, value);
          }
        });
      });

      if (minValue === Infinity || maxValue === -Infinity) {
        container.innerHTML = `
          <div>
            <h6 class="font-medium text-gray-800 mb-2 text-sm">${title}</h6>
            <div class="text-center text-gray-500 py-3 text-sm">No valid data available for this target gene</div>
          </div>
        `;
        return;
      }

      // Create color function based on color scheme
      function getColor(value, normalizedValue) {
        const intensity = Math.round(255 - (normalizedValue * 155)); // 255 to 100
        
        switch (colorScheme.baseColor) {
          case 'blue':
            return `rgb(${intensity}, ${intensity}, 255)`;
          case 'green':
            return `rgb(${intensity}, 255, ${intensity})`;
          case 'red':
            return `rgb(255, ${intensity}, ${intensity})`;
          default:
            return `rgb(${intensity}, ${intensity}, 255)`;
        }
      }

      let heatmapHtml = `
        <div>
          <h6 class="font-medium text-gray-800 mb-2 text-sm">${title}</h6>
          <div class="bg-white border border-gray-200 rounded overflow-hidden">
            <div class="overflow-x-auto">
              <table class="min-w-full border-collapse text-xs">
                <thead>
                  <tr>
                    <th class="border border-gray-300 px-2 py-1 bg-gray-50 font-medium text-gray-700 text-left">Assay</th>
                    ${columns.map(column => `
                      <th class="border border-gray-300 px-2 py-1 bg-gray-50 font-medium text-gray-700 text-center">${column}</th>
                    `).join('')}
                  </tr>
                </thead>
                <tbody>
                  ${data.map(row => `
                    <tr>
                      <td class="border border-gray-300 px-2 py-1 bg-gray-50 font-medium text-gray-700">${row.assay.replace('_', ' ')}</td>
                      ${columns.map(column => {
                        const value = row[column];
                        let cellContent = '';
                        let cellStyle = 'background-color: #f3f4f6;'; // Default gray for N/A
                        
                        if (value !== null && value !== undefined && !isNaN(value)) {
                          // Normalize value to 0-1 range for color mapping
                          const normalizedValue = (value - minValue) / (maxValue - minValue);
                          cellStyle = `background-color: ${getColor(value, normalizedValue)};`;
                          
                          // Format the value
                          cellContent = value < 0.001 ? value.toExponential(2) : value.toFixed(4);
                        } else {
                          cellContent = 'N/A';
                        }
                        
                        return `<td class="border border-gray-300 px-2 py-1 text-center" style="${cellStyle}">${cellContent}</td>`;
                      }).join('')}
                    </tr>
                  `).join('')}
                </tbody>
              </table>
            </div>
          </div>
          <div class="mt-2 flex items-center justify-center space-x-4 text-xs text-gray-600">
            <div class="flex items-center space-x-1">
              <div class="w-3 h-3 border border-gray-300" style="background-color: ${colorScheme.lowColor};"></div>
              <span>Low (${minValue.toExponential(2)})</span>
            </div>
            <div class="flex items-center space-x-1">
              <div class="w-3 h-3 border border-gray-300" style="background-color: ${colorScheme.highColor};"></div>
              <span>High (${maxValue.toExponential(2)})</span>
            </div>
          </div>
        </div>
      `;
      
      container.innerHTML = heatmapHtml;
    }

    // Function to show target gene details in inline expansion panel
    window.showTargetGeneDetails = async function(targetGene, rank) {
      try {
        // Check if this panel is already open
        const currentPanel = document.getElementById(`gene-details-${targetGene}-${name}`);
        const isCurrentlyOpen = currentPanel && !currentPanel.classList.contains('hidden');
        
        // Close any currently open panels
        document.querySelectorAll('.gene-details-panel').forEach(panel => {
          panel.classList.add('hidden');
        });
        
        // Remove active styling from all gene rows and reset chevrons
        document.querySelectorAll('.gene-row').forEach(row => {
          row.classList.remove('bg-blue-100', 'border-blue-200');
          row.classList.add('bg-gray-50');
          // Reset chevron rotation
          const chevron = row.querySelector('.gene-chevron');
          if (chevron) {
            chevron.style.transform = 'rotate(0deg)';
          }
        });

        // If this panel was already open, just close it and return
        if (isCurrentlyOpen) {
          return;
        }

        const response = await fetch(`/transcription_factors/${name}.json`);
        const tfData = await response.json();
        const targetGenesData = tfData.target_genes || {};
        
        // Calculate scores for this target gene across all assays
        const geneScores = {};
        const activeAssays = getActiveAssays();
        
        // Get scores from all assays (not just active ones for complete picture)
        Object.keys(targetGenesData).forEach(assay => {
          const score = targetGenesData[assay][targetGene];
          if (score !== undefined) {
            geneScores[assay] = score;
          }
        });

        // Calculate average score from active assays
        let activeTotal = 0;
        let activeCount = 0;
        activeAssays.forEach(assay => {
          if (geneScores[assay] !== undefined) {
            activeTotal += geneScores[assay];
            activeCount++;
          }
        });
        const avgScore = activeCount > 0 ? (activeTotal / activeCount) : 0;



        // Extract affinity data for heatmap
        const affinityData = tfData.tg_affinities || {};
        const conditions = Object.keys(affinityData);
        const allAssaysInAffinities = new Set();
        
        // Collect all assays from affinity data
        conditions.forEach(condition => {
          Object.keys(affinityData[condition] || {}).forEach(assay => {
            allAssaysInAffinities.add(assay);
          });
        });
        
        const assaysInAffinities = Array.from(allAssaysInAffinities);
        
        // Build affinity matrix for this target gene
        const affinityMatrix = [];
        assaysInAffinities.forEach(assay => {
          const row = { assay };
          conditions.forEach(condition => {
            const value = affinityData[condition]?.[assay]?.[targetGene];
            row[condition] = value !== undefined ? value : null;
          });
          affinityMatrix.push(row);
        });

        // Extract affinity ratio data
        const affinityRatioData = tfData.affinity_ratio || {};
        const ratioPairings = Object.keys(affinityRatioData);
        const allAssaysInRatios = new Set();
        
        // Collect all assays from affinity ratio data
        ratioPairings.forEach(pairing => {
          Object.keys(affinityRatioData[pairing] || {}).forEach(assay => {
            allAssaysInRatios.add(assay);
          });
        });
        
        const assaysInRatios = Array.from(allAssaysInRatios);
        
        // Build affinity ratio matrix for this target gene
        const affinityRatioMatrix = [];
        assaysInRatios.forEach(assay => {
          const row = { assay };
          ratioPairings.forEach(pairing => {
            const value = affinityRatioData[pairing]?.[assay]?.[targetGene];
            row[pairing] = value !== undefined ? value : null;
          });
          affinityRatioMatrix.push(row);
        });

        // Extract affinity sum data
        const affinitySumData = tfData.affinity_sum || {};
        const sumPairings = Object.keys(affinitySumData);
        const allAssaysInSums = new Set();
        
        // Collect all assays from affinity sum data
        sumPairings.forEach(pairing => {
          Object.keys(affinitySumData[pairing] || {}).forEach(assay => {
            allAssaysInSums.add(assay);
          });
        });
        
        const assaysInSums = Array.from(allAssaysInSums);
        
        // Build affinity sum matrix for this target gene
        const affinitySumMatrix = [];
        assaysInSums.forEach(assay => {
          const row = { assay };
          sumPairings.forEach(pairing => {
            const value = affinitySumData[pairing]?.[assay]?.[targetGene];
            row[pairing] = value !== undefined ? value : null;
          });
          affinitySumMatrix.push(row);
        });

        // Find the target panel for this gene
        const targetPanel = document.getElementById(`gene-details-${targetGene}-${name}`);
        if (!targetPanel) {
          console.error(`Panel not found for gene: ${targetGene}`);
          return;
        }

        // Highlight the selected gene row and rotate chevron
        const targetRow = document.querySelector(`[data-gene="${targetGene}"]`);
        if (targetRow) {
          targetRow.classList.remove('bg-gray-50');
          targetRow.classList.add('bg-blue-100', 'border-blue-200');
          // Rotate the chevron to indicate expansion
          const chevron = targetRow.querySelector('.gene-chevron');
          if (chevron) {
            chevron.style.transform = 'rotate(180deg)';
          }
        }

        // Populate the panel content
        targetPanel.innerHTML = `
          <div class="mt-2 bg-white border border-gray-200 rounded-lg shadow-sm">
            <!-- Panel Header -->
            <div class="px-4 py-3 border-b border-gray-200 bg-gray-50 rounded-t-lg">
              <div class="flex items-center justify-between">
                <div>
                  <h5 class="text-md font-semibold text-gray-800">${name} → ${targetGene}</h5>
                  <p class="text-xs text-gray-600">Transcription Factor - Target Gene Interaction</p>
                </div>
                <div class="flex items-center space-x-3">
                  <a 
                    href="https://www.genecards.org/cgi-bin/carddisp.pl?gene=${targetGene}"
                    target="_blank"
                    rel="noopener noreferrer"
                    class="inline-flex items-center text-gray-600 hover:text-gray-800 transition-colors duration-150"
                  >
                    <img src="/genecards.ico" alt="GeneCards" class="w-3 h-3 mr-1" />
                    <span class="text-xs">GeneCards</span>
                  </a>
                  <button 
                    onclick="closeGeneDetails('${targetGene}')"
                    class="text-gray-400 hover:text-gray-600 transition-colors duration-150 p-1"
                  >
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                </div>
              </div>
            </div>

            <!-- Panel Content -->
            <div class="px-4 py-3">
              <div class="space-y-4">
                <!-- Summary Stats -->
                <div class="grid grid-cols-3 gap-3">
                  <div class="bg-blue-50 p-2 rounded text-center">
                    <div class="text-lg font-bold text-blue-600">${avgScore.toFixed(3)}</div>
                    <div class="text-xs text-blue-800">Avg Score</div>
                  </div>
                  <div class="bg-green-50 p-2 rounded text-center">
                    <div class="text-lg font-bold text-green-600">#${rank}</div>
                    <div class="text-xs text-green-800">Rank</div>
                  </div>
                  <div class="bg-purple-50 p-2 rounded text-center">
                    <div class="text-lg font-bold text-purple-600">${Object.keys(geneScores).length}</div>
                    <div class="text-xs text-purple-800">Assays</div>
                  </div>
                </div>

                <!-- Scores by Assay -->
                <div>
                  <h6 class="font-medium text-gray-800 mb-2 text-sm">Scores by Assay</h6>
                  <div class="bg-gray-50 border border-gray-200 rounded overflow-hidden">
                    <div class="divide-y divide-gray-200">
                      ${Object.entries(geneScores).map(([assay, score]) => {
                        const isActive = activeAssays.includes(assay);
                        return `
                          <div class="px-3 py-2 flex items-center justify-between text-sm ${isActive ? 'bg-blue-50' : 'bg-gray-50'}">
                            <div class="flex items-center space-x-2">
                              <span class="font-medium text-gray-900">${assay}</span>
                              ${isActive ? '<span class="px-1 py-0.5 text-xs bg-blue-100 text-blue-800 rounded">Active</span>' : '<span class="px-1 py-0.5 text-xs bg-gray-200 text-gray-600 rounded">Inactive</span>'}
                            </div>
                            <span class="font-medium ${isActive ? 'text-blue-600' : 'text-gray-600'}">${score.toFixed(3)}</span>
                          </div>
                        `;
                      }).join('')}
                    </div>
                  </div>
                </div>

                <!-- Target Gene Affinities Heatmap -->
                <div id="affinity-heatmap-${targetGene}-${name}"></div>

                <!-- Target Gene Affinity Ratios Heatmap -->
                <div id="affinity-ratio-heatmap-${targetGene}-${name}"></div>

                <!-- Target Gene Affinity Sums Heatmap -->
                <div id="affinity-sum-heatmap-${targetGene}-${name}"></div>
              </div>
            </div>
          </div>
        `;

        // Render all three heatmaps using the utility function
        renderHeatmap(
          `affinity-heatmap-${targetGene}-${name}`,
          "Target Gene Affinities Across Conditions",
          affinityMatrix,
          conditions,
          { baseColor: 'blue', lowColor: 'rgb(255, 255, 255)', highColor: 'rgb(100, 100, 255)' }
        );

        renderHeatmap(
          `affinity-ratio-heatmap-${targetGene}-${name}`,
          "Target Gene Affinity Ratios",
          affinityRatioMatrix,
          ratioPairings,
          { baseColor: 'green', lowColor: 'rgb(255, 255, 255)', highColor: 'rgb(100, 255, 100)' }
        );

        renderHeatmap(
          `affinity-sum-heatmap-${targetGene}-${name}`,
          "Target Gene Affinity Sums",
          affinitySumMatrix,
          sumPairings,
          { baseColor: 'red', lowColor: 'rgb(255, 255, 255)', highColor: 'rgb(255, 100, 100)' }
        );

        // Show the panel
        targetPanel.classList.remove('hidden');
        
        // Smooth scroll to the panel
        setTimeout(() => {
          targetPanel.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'nearest' 
          });
        }, 100);
        
      } catch (error) {
        console.error('Error loading target gene details:', error);
        alert('Error loading target gene details. Please try again.');
      }
    };

    // Function to close gene details panel
    window.closeGeneDetails = function(targetGene) {
      // Hide the panel
      const panel = document.getElementById(`gene-details-${targetGene}-${name}`);
      if (panel) {
        panel.classList.add('hidden');
      }
      
      // Remove active styling from the gene row and reset chevron
      const targetRow = document.querySelector(`[data-gene="${targetGene}"]`);
      if (targetRow) {
        targetRow.classList.remove('bg-blue-100', 'border-blue-200');
        targetRow.classList.add('bg-gray-50');
        // Reset chevron rotation
        const chevron = targetRow.querySelector('.gene-chevron');
        if (chevron) {
          chevron.style.transform = 'rotate(0deg)';
        }
      }
    };

    // Listen for assay toggle changes to refresh target genes
    document.addEventListener('click', (event) => {
      if (event.target && event.target.classList.contains('assay-toggle')) {
        // Add a small delay to ensure the toggle state has been updated
        setTimeout(() => {
          const targetsContent = document.getElementById(`content-targets-${name}`);
          if (targetsContent && !targetsContent.classList.contains('hidden')) {
            loadTargetGenes();
          }
        }, 100);
      }
    });
  });
</script> 