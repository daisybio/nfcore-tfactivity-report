---
import DCGScoresChart from "./plots/DCGScoresChart.astro";
import DifferentialExpressionChart from "./plots/DifferentialExpressionChart.astro";
import TPMBoxplot from "./plots/TPMBoxplot.astro";
import TargetGenesView from "./plots/TargetGenesView.astro";
import RegressionCoefficientsHeatmap from "./plots/RegressionCoefficientsHeatmap.astro";

export interface Props {
  name: string;
  tfData?: any;
  overviewData?: any;
  showTargetGenes?: boolean;
}

const { name, tfData, overviewData, showTargetGenes = false } = Astro.props;

// Extract data from either tfData (TF detail pages) or overviewData (index page)
const extractedData = tfData || (overviewData?.[name] || null);
---

<div class="px-6 py-4 bg-gray-50 border-t border-gray-200">
  <!-- Tab Navigation -->
  <div class="mb-6">
    <nav class="flex justify-center space-x-8" aria-label="Tabs">
      <button id={`tab-plots-${name}`} class="tab-button active whitespace-nowrap py-2 px-1 border-b-2 border-blue-500 font-medium text-sm text-blue-600">
        Expression Analysis
      </button>
      <button id={`tab-targets-${name}`} class="tab-button whitespace-nowrap py-2 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300">
        Target Genes
      </button>
      <button id={`tab-regression-${name}`} class="tab-button whitespace-nowrap py-2 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300">
        Regression Coefficients
      </button>
    </nav>
  </div>

  <!-- Tab Content -->
  <div id={`content-plots-${name}`} class="tab-content active">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <!-- Activity Across Assays - DCG Scores Chart -->
      <div class="md:col-span-2">
        <DCGScoresChart name={name} dcgScores={extractedData?.dcg} />
      </div>
      
      <!-- Differential Expression Chart -->
      <div class="md:col-span-2">
        <DifferentialExpressionChart name={name} differentialExpressionData={extractedData?.differential_expression} />
      </div>
      
      <!-- TPM Expression Levels Chart -->
      <div class="md:col-span-2">
        <TPMBoxplot name={name} tpmData={extractedData?.tpm} />
      </div>
    </div>
  </div>

  <div id={`content-targets-${name}`} class="tab-content hidden">
    {showTargetGenes ? (
      <TargetGenesView name={name} />
    ) : (
      <div class="flex flex-col items-center justify-center py-12 px-6 bg-blue-50 rounded-lg border border-blue-200">
        <div class="max-w-md text-center">
          <div class="flex justify-center mb-4">
            <svg class="w-16 h-16 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <h3 class="text-lg font-semibold text-blue-900 mb-3">Target Gene Analysis Available</h3>
          <p class="text-blue-800 mb-6 leading-relaxed">
            Detailed target gene information, including gene rankings, interaction scores, and comprehensive analysis charts, is available on the individual transcription factor details page.
          </p>
          <a 
            href={`/tf/${name.toLowerCase()}/index.html`}
            class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200 font-medium"
          >
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
            </svg>
            View {name} Details
          </a>
        </div>
      </div>
    )}
  </div>

  <div id={`content-regression-${name}`} class="tab-content hidden">
    <RegressionCoefficientsHeatmap name={name} regressionCoefficients={extractedData?.regression_coefficients} />
  </div>
</div>



<script define:vars={{ name, showTargetGenes }}>
  document.addEventListener('DOMContentLoaded', () => {
    const plotsTab = document.getElementById(`tab-plots-${name}`);
    const targetsTab = document.getElementById(`tab-targets-${name}`);
    const regressionTab = document.getElementById(`tab-regression-${name}`);
    const plotsContent = document.getElementById(`content-plots-${name}`);
    const targetsContent = document.getElementById(`content-targets-${name}`);
    const regressionContent = document.getElementById(`content-regression-${name}`);

    const allTabs = [plotsTab, targetsTab, regressionTab];
    const allContents = [plotsContent, targetsContent, regressionContent];

    function switchTab(activeTab, activeContent) {
      // Reset all tabs to inactive state
      allTabs.forEach(tab => {
        tab.classList.remove('active', 'border-blue-500', 'text-blue-600');
        tab.classList.add('border-transparent', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300');
      });

      // Reset all content to hidden
      allContents.forEach(content => {
        content.classList.add('hidden');
        content.classList.remove('active');
      });

      // Activate selected tab
      activeTab.classList.add('active', 'border-blue-500', 'text-blue-600');
      activeTab.classList.remove('border-transparent', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300');

      // Show selected content
      activeContent.classList.remove('hidden');
      activeContent.classList.add('active');
    }

    plotsTab.addEventListener('click', () => {
      switchTab(plotsTab, plotsContent);
    });

    targetsTab.addEventListener('click', () => {
      switchTab(targetsTab, targetsContent);
      // Only load target genes when showTargetGenes is true
      if (showTargetGenes) {
        const loadTargetGenesFunc = window[`loadTargetGenes_${name}`];
        if (loadTargetGenesFunc) {
          loadTargetGenesFunc();
        }
      }
    });

    regressionTab.addEventListener('click', () => {
      switchTab(regressionTab, regressionContent);
    });
  });
</script>
