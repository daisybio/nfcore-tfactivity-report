---
import rankingData from "../assets/ranking.json";

export interface Props {
  name: string;
}

const { name } = Astro.props;

// Get scores for this transcription factor across all assays
const tfScores = Object.entries(rankingData as any).reduce((acc, [assay, tfs]) => {
  if ((tfs as any)[name] !== undefined) {
    acc[assay] = (tfs as any)[name];
  }
  return acc;
}, {} as Record<string, number>);

const chartId = `chart-${name.toLowerCase().replace(/[^a-z0-9]/g, '-')}`;
const deChartId = `de-chart-${name.toLowerCase().replace(/[^a-z0-9]/g, '-')}`;
const tpmChartId = `tpm-chart-${name.toLowerCase().replace(/[^a-z0-9]/g, '-')}`;
---

<div class="px-6 py-4 bg-gray-50 border-t border-gray-200">
  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
    <!-- Binding Information -->
    <div>
      <h4 class="font-semibold text-gray-800 mb-2">Binding Sites</h4>
      <ul class="text-sm text-gray-600 space-y-1">
        <li>• Promoter regions: 45 predicted sites</li>
        <li>• Enhancer regions: 23 validated sites</li>
        <li>• TFBS motif: CAGGTG consensus</li>
      </ul>
    </div>
    
    <!-- Target Genes -->
    <div>
      <h4 class="font-semibold text-gray-800 mb-2">Target Genes</h4>
      <ul class="text-sm text-gray-600 space-y-1">
        <li>• Primary targets: 127 genes</li>
        <li>• Secondary targets: 89 genes</li>
        <li>• Pathway enrichment: Cell cycle regulation</li>
      </ul>
    </div>
    
    <!-- Activity Across Assays - Plotly Chart -->
    <div class="md:col-span-2">
      <h4 class="font-semibold text-gray-800 mb-2">Discounted Cumulative Gain in Different Assays</h4>
      <div id={chartId} style="height: 300px;"></div>
    </div>
    
    <!-- Differential Expression - Plotly Chart -->
    <div class="md:col-span-2">
      <h4 class="font-semibold text-gray-800 mb-2">Differential Expression</h4>
      <div id={deChartId} style="height: 300px;"></div>
    </div>
    
    <!-- TPM Expression Levels - Plotly Chart -->
    <div class="md:col-span-2">
      <h4 class="font-semibold text-gray-800 mb-2">TPM Expression Levels by Condition</h4>
      <div id={tpmChartId} style="height: 300px;"></div>
    </div>
  </div>
</div>

<script src="https://cdn.plot.ly/plotly-3.0.1.min.js" charset="utf-8"></script>

<script define:vars={{ chartId, deChartId, tpmChartId, tfScores, name }}>
  
  // Prepare data for DCG scores chart
  const assays = Object.keys(tfScores);
  const scores = Object.values(tfScores);
  
  const data = [{
    x: scores,
    y: assays,
    type: 'bar',
    orientation: 'h',
    marker: {
      color: '#2563eb', // Blue-600 to match the theme
      opacity: 0.8
    },
    text: scores.map(score => score.toFixed(3)),
    textposition: 'auto',
    hovertemplate: '<b>%{y}</b><br>DCG Score: %{x:.3f}<extra></extra>'
  }];
  
  const layout = {
    title: {
      text: `${name} DCG Scores by Assay`,
      font: { size: 14, color: '#374151' }
    },
    xaxis: {
      title: 'DCG Score (Discounted Cumulative Gain)',
      range: [0, Math.max(...scores) * 1.1],
      font: { size: 12 }
    },
    yaxis: {
      title: 'Assay Type',
      font: { size: 12 },
      automargin: true
    },
    margin: {
      l: 120,
      r: 30,
      t: 50,
      b: 60
    },
    plot_bgcolor: 'rgba(0,0,0,0)', // Transparent background
    paper_bgcolor: 'rgba(0,0,0,0)', // Transparent background
    showlegend: false
  };
  
  const config = {
    responsive: true,
    displayModeBar: false
  };
  
  // Function to create differential expression chart
  async function createDifferentialExpressionChart() {
    try {
      const response = await fetch(`/transcription_factors/${name}.json`);
      if (!response.ok) {
        console.warn(`Could not load data for ${name}: ${response.status}`);
        return;
      }
      
      const tfData = await response.json();
      const differentialExpression = tfData.differential_expression || {};
      
      const comparisons = Object.keys(differentialExpression);
      if (comparisons.length === 0) {
        console.warn(`No differential expression data found for ${name}`);
        return;
      }
      
      const log2FoldChanges = comparisons.map(comp => differentialExpression[comp]?.log2FoldChange || 0);
      const pValues = comparisons.map(comp => differentialExpression[comp]?.pvalue || 1);
      
      // Color bars based on significance (p < 0.05)
      const barColors = pValues.map(p => p < 0.05 ? '#dc2626' : '#6b7280'); // Red for significant, gray for non-significant
      const significanceText = pValues.map((p, i) => 
        p < 0.05 ? `Significant, p-value=${p.toExponential(2)}` : `Not significant, p-value=${p.toExponential(2)}`
      );
      
      const deData = [{
        x: log2FoldChanges,
        y: comparisons,
        type: 'bar',
        orientation: 'h',
        marker: {
          color: barColors,
          opacity: 0.8
        },
        text: significanceText,
        textposition: 'auto',
        hovertemplate: '<b>%{y}</b><br>Log2 Fold Change: %{x:.3f}<br>P-value: %{customdata:.2e}<br>%{text}<extra></extra>',
        customdata: pValues
      }];
      
      const deLayout = {
        title: {
          text: `${name} Log2 Fold Change by Comparison`,
          font: { size: 14, color: '#374151' }
        },
        xaxis: {
          title: 'Log2 Fold Change',
          font: { size: 12 },
          zeroline: true,
          zerolinecolor: '#374151',
          zerolinewidth: 2
        },
        yaxis: {
          title: 'Condition Comparison',
          font: { size: 12 },
          automargin: true
        },
        margin: {
          l: 150,
          r: 30,
          t: 50,
          b: 60
        },
        plot_bgcolor: 'rgba(0,0,0,0)',
        paper_bgcolor: 'rgba(0,0,0,0)',
        showlegend: false
      };

      const deChartElement = document.getElementById(deChartId);
      if (deChartElement) {
        Plotly.newPlot(deChartId, deData, deLayout, config);
      }
      
    } catch (error) {
      console.error(`Error loading differential expression data for ${name}:`, error);
    }
  }

  // Function to create TPM boxplot
  async function createTPMBoxplot() {
    try {
      const response = await fetch(`/transcription_factors/${name}.json`);
      if (!response.ok) {
        console.warn(`Could not load data for ${name}: ${response.status}`);
        return;
      }
      
      const tfData = await response.json();
      const tpmData = tfData.tpm || {};
      
      const conditions = Object.keys(tpmData);
      if (conditions.length === 0) {
        console.warn(`No TPM data found for ${name}`);
        return;
      }
      
      // Prepare data for boxplot - collect all samples across conditions
      let allTPMValues = [];
      let allConditions = [];
      let sampleNames = [];
      
      conditions.forEach(condition => {
        const samples = tpmData[condition];
        Object.entries(samples).forEach(([sampleName, tpmValue]) => {
          allTPMValues.push(tpmValue);
          allConditions.push(condition);
          sampleNames.push(sampleName);
        });
      });
      
      const boxplotData = [{
        x: allTPMValues,
        y: allConditions,
        type: 'box',
        orientation: 'h',
        boxpoints: 'all', // Show all sample points
        jitter: 0.3,
        pointpos: -1.8,
        marker: {
          color: '#2563eb',
          opacity: 0.6
        },
        line: {
          color: '#1d4ed8'
        },
        text: sampleNames,
        hovertemplate: '<b>%{y}</b><br>Sample: %{text}<br>TPM: %{x:.2f}<extra></extra>'
      }];
      
      const tpmLayout = {
        title: {
          text: `${name} TPM Expression Distribution`,
          font: { size: 14, color: '#374151' }
        },
        xaxis: {
          title: 'TPM (Transcripts Per Million)',
          font: { size: 12 },
          zeroline: false
        },
        yaxis: {
          title: 'Condition',
          font: { size: 12 },
          automargin: true
        },
        margin: {
          l: 120,
          r: 30,
          t: 50,
          b: 60
        },
        plot_bgcolor: 'rgba(0,0,0,0)',
        paper_bgcolor: 'rgba(0,0,0,0)',
        showlegend: false
      };

      const tpmChartElement = document.getElementById(tpmChartId);
      if (tpmChartElement) {
        Plotly.newPlot(tpmChartId, boxplotData, tpmLayout, config);
      }
      
    } catch (error) {
      console.error(`Error loading TPM data for ${name}:`, error);
    }
  }

  // Create all plots when the DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    // DCG scores chart
    const chartElement = document.getElementById(chartId);
    if (chartElement) {
      Plotly.newPlot(chartId, data, layout, config);
    }
    
    // Load and create differential expression chart
    createDifferentialExpressionChart();
    
    // Load and create TPM boxplot
    createTPMBoxplot();
  });
</script> 