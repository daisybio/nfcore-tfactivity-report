---
import TranscriptionFactorDetails from "./TranscriptionFactorDetails.astro";

export interface Props {
  rank: number;
  name: string;
  averageScore: number;
  assayCount: number;
}

const { rank, name, averageScore, assayCount } = Astro.props;
const panelId = `panel-${name.toLowerCase().replace(/[^a-z0-9]/g, '-')}`;
---

<div class="expansion-panel border-b border-gray-100" id={panelId}>
  <!-- Clickable Header -->
  <div class="expansion-header px-6 py-4 hover:bg-gray-50 transition-colors duration-150 cursor-pointer" data-panel={panelId}>
    <div class="grid grid-cols-3 gap-4 items-center">
      <span class="text-gray-600 font-medium">#{rank}</span>
      <div class="flex items-center justify-between">
        <div class="flex items-center gap-2">
          <span class="font-semibold text-gray-800">{name}</span>
          <a 
            href={`https://www.genecards.org/cgi-bin/carddisp.pl?gene=${name}`}
            target="_blank"
            rel="noopener noreferrer"
            class="hover:opacity-75 transition-opacity duration-150"
            title={`View ${name} on GeneCards`}
            onclick="event.stopPropagation()"
          >
            <img src="/genecards.ico" alt="GeneCards" class="w-4 h-4" />
          </a>
          <a 
            href={`/tf/${name.toLowerCase()}`}
            class="text-blue-500 hover:text-blue-700 transition-colors duration-150 text-sm"
            title="View details"
            onclick="event.stopPropagation()"
          >
            Details
          </a>
        </div>
        <!-- Expansion indicator -->
        <svg class="expansion-chevron w-5 h-5 text-gray-400 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
        </svg>
      </div>
      <div class="text-right">
        <span class="text-lg font-bold text-blue-600">{averageScore.toFixed(3)}</span>
        <span class="text-sm text-gray-500 ml-2">({assayCount} assay{assayCount !== 1 ? 's' : ''})</span>
      </div>
    </div>
  </div>
  
  <!-- Expandable Content -->
  <div class="expansion-content overflow-hidden transition-all duration-300 ease-in-out" style="max-height: 0;">
    <TranscriptionFactorDetails name={name} />
  </div>
</div>

<script define:vars={{ panelId }}>
  document.addEventListener('DOMContentLoaded', () => {
    // Add click event listener to this specific panel's header
    const header = document.querySelector(`[data-panel="${panelId}"]`);
    
    if (header) {
      header.addEventListener('click', function() {
        toggleExpansion(panelId);
      });
    }
  });
  
  function toggleExpansion(targetPanelId) {
    const panel = document.getElementById(targetPanelId);
    const content = panel?.querySelector('.expansion-content');
    const chevron = panel?.querySelector('.expansion-chevron');
    
    if (!panel || !content || !chevron) return;
    
    const isExpanded = content.style.maxHeight && content.style.maxHeight !== '0px';
    
    if (isExpanded) {
      // Collapse
      content.style.maxHeight = '0px';
      chevron.style.transform = 'rotate(0deg)';
      panel.classList.remove('expanded');
    } else {
      // Expand
      content.style.maxHeight = content.scrollHeight + 'px';
      chevron.style.transform = 'rotate(180deg)';
      panel.classList.add('expanded');
    }
  }
</script> 