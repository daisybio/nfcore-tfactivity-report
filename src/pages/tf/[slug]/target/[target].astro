---
import "../../../../styles/global.css";
import rankingData from "../../../../assets/ranking.json";

export async function getStaticPaths() {
  const paths: Array<{
    params: { slug: string; target: string };
    props: { tfName: string; targetGene: string; targetGenesData: Record<string, Record<string, number>> };
  }> = [];
  
  // Import all TF JSON files using glob pattern
  const tfFiles = import.meta.glob('/public/transcription_factors/*.json', { eager: true });
  
  // Process each TF file
  Object.entries(tfFiles).forEach(([filePath, fileData]: [string, any]) => {
    // Extract TF name from file path
    const fileName = filePath.split('/').pop()?.replace('.json', '');
    if (!fileName) return;
    
    const tfName = fileName;
    // Access the data directly (no .default needed with eager glob imports)
    const targetGenesData = fileData?.target_genes || {};
    
    // Collect all unique target genes across all assays for this TF
    const targetGenes = new Set<string>();
    Object.values(targetGenesData).forEach((assayData: any) => {
      Object.keys(assayData).forEach((gene: string) => targetGenes.add(gene));
    });
    
    // Create paths for each target gene
    Array.from(targetGenes).forEach((targetGene: string) => {
      paths.push({
        params: { 
          slug: tfName.toLowerCase(), 
          target: targetGene.toLowerCase() 
        },
        props: { 
          tfName, 
          targetGene,
          targetGenesData 
        }
      });
    });
  });
  
  return paths;
}

interface Props {
  tfName: string;
  targetGene: string;
  targetGenesData: Record<string, Record<string, number>>;
}

const { tfName, targetGene, targetGenesData }: Props = Astro.props;

// Calculate statistics for this TF-target gene interaction
const assayScores: Record<string, number> = {};
let totalScore = 0;
let assayCount = 0;

Object.entries(targetGenesData).forEach(([assay, genes]) => {
  if (genes[targetGene] !== undefined) {
    assayScores[assay] = genes[targetGene];
    totalScore += genes[targetGene];
    assayCount++;
  }
});

const averageScore = assayCount > 0 ? totalScore / assayCount : 0;

// Calculate rank of this target gene within the TF's targets
let targetRank = 0;
const allGeneScores: Array<{gene: string, score: number}> = [];

// Aggregate all target genes and their average scores
const geneScores: Record<string, {total: number, count: number}> = {};
Object.values(targetGenesData).forEach(assayData => {
  Object.entries(assayData).forEach(([gene, score]) => {
    if (!geneScores[gene]) {
      geneScores[gene] = { total: 0, count: 0 };
    }
    geneScores[gene].total += score;
    geneScores[gene].count += 1;
  });
});

// Convert to sorted array
Object.entries(geneScores).forEach(([gene, data]) => {
  allGeneScores.push({
    gene,
    score: data.total / data.count
  });
});

allGeneScores.sort((a, b) => b.score - a.score);
targetRank = allGeneScores.findIndex(item => item.gene === targetGene) + 1;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{tfName} → {targetGene} - nf-core/tfactivity report</title>
  </head>
  <body class="bg-gray-50">
    <div class="max-w-4xl mx-auto py-8 px-4">
      <!-- Header -->
      <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-3xl font-bold text-gray-800">
              <span class="text-blue-600">{tfName}</span>
              <span class="text-gray-400 mx-2">→</span>
              <span class="text-green-600">{targetGene}</span>
            </h1>
            <p class="text-gray-600 mt-2">Transcription Factor - Target Gene Interaction</p>
          </div>
          <div class="text-right">
            <div class="text-2xl font-bold text-blue-600">{averageScore.toFixed(3)}</div>
            <div class="text-sm text-gray-500">Average Score</div>
            <div class="text-sm text-gray-500">Rank #{targetRank} of {allGeneScores.length}</div>
          </div>
        </div>
        
        <!-- Navigation -->
        <div class="mt-6 pt-4 border-t border-gray-200 flex flex-wrap gap-4">
          <a 
            href="/" 
            class="inline-flex items-center text-blue-600 hover:text-blue-800 transition-colors duration-150"
          >
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            Overview
          </a>
          <a 
            href={`/tf/${tfName.toLowerCase()}`}
            class="inline-flex items-center text-blue-600 hover:text-blue-800 transition-colors duration-150"
          >
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
            {tfName} Details
          </a>
          <a 
            href={`https://www.genecards.org/cgi-bin/carddisp.pl?gene=${targetGene}`}
            target="_blank"
            rel="noopener noreferrer"
            class="inline-flex items-center text-green-600 hover:text-green-800 transition-colors duration-150"
          >
            <img src="/genecards.ico" alt="GeneCards" class="w-4 h-4 mr-2" />
            {targetGene} on GeneCards
          </a>
        </div>
      </div>

      <!-- Interaction Details -->
      <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
        <h2 class="text-xl font-bold text-gray-800 mb-4">Interaction Scores by Assay</h2>
        
        {assayCount > 0 ? (
          <div class="space-y-3">
            {Object.entries(assayScores).map(([assay, score]) => (
              <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div class="flex items-center space-x-3">
                  <div class="w-3 h-3 bg-blue-500 rounded-full"></div>
                  <span class="font-medium text-gray-800">
                    {assay.replace('_', ' ').replace(/([A-Z])/g, ' $1').trim()}
                  </span>
                </div>
                <div class="text-lg font-bold text-blue-600">{score.toFixed(3)}</div>
              </div>
            ))}
            
            <!-- Summary -->
            <div class="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
              <div class="flex items-center justify-between">
                <div>
                  <h3 class="font-semibold text-blue-800">Summary Statistics</h3>
                  <p class="text-sm text-blue-600 mt-1">
                    Found in {assayCount} assay{assayCount !== 1 ? 's' : ''} out of {Object.keys(targetGenesData).length} total
                  </p>
                </div>
                <div class="text-right">
                  <div class="text-2xl font-bold text-blue-800">{averageScore.toFixed(3)}</div>
                  <div class="text-sm text-blue-600">Average Score</div>
                </div>
              </div>
            </div>
          </div>
        ) : (
          <div class="text-center py-8 text-gray-500">
            <svg class="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.42-1.265-5.53-3.291M12 15L9.5 17.5 12 20l2.5-2.5L12 15z"></path>
            </svg>
            <h3 class="text-lg font-medium text-gray-700 mb-2">No Interaction Data Found</h3>
            <p class="text-gray-500">
              This target gene was not found in any assays for {tfName}.
            </p>
          </div>
        )}
      </div>

      <!-- Related Targets -->
      {assayCount > 0 && (
        <div class="bg-white rounded-lg shadow-sm p-6">
          <h2 class="text-xl font-bold text-gray-800 mb-4">Other Top Targets of {tfName}</h2>
          <div class="space-y-2">
            {allGeneScores.slice(0, 10).map((item, index) => (
              <div class="flex items-center justify-between py-2 px-3 rounded-lg" 
                   class:list={[item.gene === targetGene ? 'bg-blue-100 border border-blue-200' : 'bg-gray-50']}>
                <div class="flex items-center space-x-3">
                  <span class="font-medium text-gray-700 text-sm w-8">#{index + 1}</span>
                  <a 
                    href={`/tf/${tfName.toLowerCase()}/target/${item.gene.toLowerCase()}`}
                    class:list={[
                      "font-semibold transition-colors duration-150",
                      item.gene === targetGene 
                        ? "text-blue-700" 
                        : "text-gray-900 hover:text-blue-600"
                    ]}
                  >
                    {item.gene}
                  </a>
                  {item.gene === targetGene && (
                    <span class="text-xs bg-blue-500 text-white px-2 py-1 rounded-full">Current</span>
                  )}
                </div>
                <div class="text-sm font-medium text-blue-600">{item.score.toFixed(3)}</div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  </body>
</html>

<style>
  html {
    font-family: system-ui, sans-serif;
  }
</style> 