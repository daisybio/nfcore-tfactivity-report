---
import "../../styles/global.css";
import TranscriptionFactorDetails from "../../components/TranscriptionFactorDetails.astro";

export async function getStaticPaths() {
  // Import all TF JSON files using glob pattern inside the function
  const tfJsonFiles = import.meta.glob('../../assets/transcription_factors/*.json', { 
    eager: true, 
    query: '?raw',
    import: 'default'
  });

  // Extract TF names from the TF JSON files instead of overview data
  const tfNames = Object.keys(tfJsonFiles).map((path: string) => {
    const fileName = path.split('/').pop()?.replace('.json', '');
    return fileName;
  }).filter((name): name is string => Boolean(name));
  
  // Generate paths for each TF
  return tfNames.map((name: string) => ({
    params: { slug: name.toLowerCase() },
    props: { name }
  }));
}

interface Props {
  name: string;
}

const { name }: Props = Astro.props;

// Import TF JSON files again for runtime use
const tfJsonFiles = import.meta.glob('../../assets/transcription_factors/*.json', { 
  eager: true, 
  query: '?raw',
  import: 'default'
});

// Get the TF data from the imported files
let tfJsonData = null;
const tfFileName = `../../assets/transcription_factors/${name}.json`;
if (tfJsonFiles[tfFileName]) {
  try {
    tfJsonData = JSON.parse(tfJsonFiles[tfFileName] as string);
  } catch (error) {
    console.error(`Error parsing JSON for ${name}:`, error);
  }
}

// Calculate average score and assay count for this TF from the TF-specific data
let totalScore = 0;
let assayCount = 0;
if (tfJsonData && tfJsonData.dcg) {
  Object.values(tfJsonData.dcg).forEach((score: any) => {
    if (score !== undefined) {
      totalScore += score;
      assayCount++;
    }
  });
}
const averageScore = assayCount > 0 ? totalScore / assayCount : 0;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{name} - nf-core/tfactivity report</title>
  </head>
  <body class="bg-gray-50">
    <div class="max-w-6xl mx-auto py-8 px-4">
      <!-- Header -->
      <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-3xl font-bold text-gray-800">{name}</h1>
            <p class="text-gray-600 mt-2">Transcription Factor Activity Report</p>
          </div>
          <div class="text-right">
            <div class="text-2xl font-bold text-blue-600">{averageScore.toFixed(3)}</div>
            <div class="text-sm text-gray-500">Average Score</div>
            <div class="text-sm text-gray-500">({assayCount} assay{assayCount !== 1 ? 's' : ''})</div>
          </div>
        </div>
        
        <!-- Navigation -->
        <div class="mt-6 pt-4 border-t border-gray-200">
          <a 
            href="/" 
            class="inline-flex items-center text-blue-600 hover:text-blue-800 transition-colors duration-150"
          >
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            Back to Overview
          </a>
          <a 
            href={`https://www.genecards.org/cgi-bin/carddisp.pl?gene=${name}`}
            target="_blank"
            rel="noopener noreferrer"
            class="inline-flex items-center ml-6 text-gray-600 hover:text-gray-800 transition-colors duration-150"
          >
            <img src="/genecards.ico" alt="GeneCards" class="w-4 h-4 mr-2" />
            View on GeneCards
          </a>
        </div>
      </div>

      <!-- Detailed Content -->
      <div class="bg-white rounded-lg shadow-sm">
        <TranscriptionFactorDetails name={name} tfData={tfJsonData} />
      </div>
    </div>

    <!-- Make TF data available globally for client-side components -->
    <script define:vars={{ name, tfJsonData }}>
      // Store the TF data globally so client-side components can access it
      if (!window.tfDataCache) {
        window.tfDataCache = {};
      }
      if (tfJsonData) {
        window.tfDataCache[name] = tfJsonData;
      }
    </script>
  </body>
</html>

<style>
  html {
    font-family: system-ui, sans-serif;
  }
</style> 